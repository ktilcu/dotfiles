{
    ;; !  | mandatory  (not recursive) modifiers which must be pressed
    ;; #  | optional   (recursive) modifiers which can be pressed
    ;; !! | command + control + optional + shift (hyper)
    ;; ## | optional any

    ;; to understand better how modifiers work in karabiner
    ;; karabiner definition of mandatory and optional
    ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;;
    ;; need to prefix C T O S F with ! or #
    ;;
    ;; code for all this:
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/b9b334a187379f9bc8182ad59e2cca2a1789e9c0/src/karabiner_configurator/keys.clj#L68


:profiles {
    :Default {  :default true
                :sim     50    ;; simultaneous_threshold_milliseconds (def: 50)
                                ;; keys need to be pressed within this threshold to be considered simultaneous
                :delay   500    ;; to_delayed_action_delay_milliseconds (def: 500)
                                ;; basically it means time after which the key press is count delayed
                :alone   500    ;; to_if_alone_timeout_milliseconds (def: 1000)
                                ;; hold for 995s and single tap registered; hold for 1005s and seen as modifier
                :held    1000   ;; to_if_held_down_threshold_milliseconds (def: 500)
                                ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
             }
} ;; profiles

:templates {
    :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
    :open "open \"%s\""
} ;; templates


;; Define different kinds of keyboards
:devices {
    :apple [
        {:vendor_id 1452 :product_id 832}
    ]

    :keychron [
        {:vendor_id 1452, :procudt_id 591}
    ]

    :all [  ;; Default for all keyboards
        {:vendor_id 1452, :procudt_id 591}
        {:vendor_id 1452 :product_id 832}
    ]

} ;; devices

;; layers are basically "hyper" keys
;; press this in combination with something else and depending on your rule, make things happen
:layers {
    :launch-mode {:key :tab}
} ;; layers

;; simlayers are basically "hyper" keys
;; layers works too, but only recommended for non-typing keys like . or tab
;; or keys like z which are used less often
:simlayers {
} ;; simlayers

;; main contains multiple manipulators
:main [

    ;; each manipulator has a description and multiple rules

    ;;{:des "..."                               ;; -> description
    ;; :rules[
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
    ;; ]}

    ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
    ;;       |_____| |_______________| |_| |_________________________________________|
    ;;        <from>    <to>      <conditions>         <other options>
    ;;
    ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
    ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
    ;;

    ;; (custom variables) & modifiers -> Advanced
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable

    {:des "Change caps_lock key to Hyper or Esc"
     :rules [
        [:##caps_lock :left_control nil {:alone :escape}]
     ]
    }

    {:des "Change caps_lock key to Hyper or Esc"
     :rules [
        [:##tab :!CTOleft_shift nil {:alone :tab}]
     ]
    }

    {:des "media keys"
     :rules [
        [:!!right_arrow :fastforward]
        [:!!left_arrow :rewind]
     ]
    }

    {:des "Tilde grave"
     :rules [
        [:!!n :grave_accent_and_tilde]
        [:!!m :!Sgrave_accent_and_tilde]
     ]
    }

    {:des "vim arrows"
     :rules [
        [:!!h :left_arrow]
        [:!!j :down_arrow]
        [:!!k :up_arrow]
        [:!!l :right_arrow]
     ]
    }

    {:des "Cmd/Ctrl -> () : primary thumb keys"
     :rules [
       [:##left_command :left_command nil {:held :left_command :alone :!S9}]
       [:##right_command :right_command nil {:held :right_command :alone :!S0}]
    ]}
]}
