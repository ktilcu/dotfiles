" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable

" Vundle {{{
filetype on " without this vim emits a zero exit status, later, because of :ft off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" install Vundle bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

call vundle#end()
" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on
" }}}
" Spaces and Tabs {{{
set autoindent
set backspace=2                                              " Fix broken backspace in some setups
set expandtab                                                " expand tabs to spaces
set nowrap                                                   " don't wrap lines
set scrolloff=3                                              " show context above/below cursorline
set shiftround                                               " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth=4                                             " number of spaces to use for autoindenting
set smarttab                                                 " insert tabs on the start of a line according to shiftwidth, not tabstop
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set tabstop=4                                                " actual tabs occupy 8 characters
" }}}
" Swap files {{{
set backupcopy=yes                                           " see :help crontab
set directory-=.                                             " don't store swapfiles in the current directory
set nobackup
set noswapfile
" }}}
" Misc {{{
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set clipboard=unnamed                                        " yank and paste with the system clipboard
set encoding=utf-8
set hidden                                                   " hides buffers instead of closing them
set history=1000                                             " remember more commands and search history
set pastetoggle=<F2>                                         " turn autoindent off to paste large amounts of text
set undolevels=1000                                          " use many muchos levels of undo
" }}}
" Search {{{
set hlsearch                                                 " highlight search terms
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set smartcase                                                " case-sensitive search if any caps
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" Use Ag over Grep
set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" }}}
" UI {{{
set background=dark
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set modelines=1
set number                                                   " show line numbers
set ruler                                                    " show where you are
set showcmd
set showmatch                                                " set show matching parenthesis
" 0 -> solid block
" 1 -> cursor line
" 2 -> solid underscore
" insert
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" normal
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" }}}
" Folding {{{
set foldenable          " don't fold files by default on open
set foldmethod=syntax   " fold based on indent level
set foldnestmax=1      " max 10 depth
set foldlevelstart=99   " start with fold level of 1
" PHP folding
let g:php_folding=2
nnoremap <space> za
" }}}
" Splits {{{
set splitbelow                                               " More sane window split behavior
set splitright                                               " More sane window split behavior
" }}}
" Colors {{{
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme monokai
" }}}
" Mouse Support {{{
" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif
" }}}
" Remaps {{{
let mapleader = ','
" BOL EOL remap
nnoremap H ^
nnoremap L $
onoremap H ^
onoremap L $
vnoremap H ^
vnoremap L $
onoremap H ^
onoremap L $
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
nnoremap <leader>a :Ag<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
" nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>g :GitGutterToggle<CR>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
" keyboard shortcuts
inoremap jj <ESC>
nnoremap <leader>u :GundoToggle<CR>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

noremap <leader>- <c-w>s
noremap <leader>\ <c-w>v
noremap <leader>\\ <c-w>q
" Rebalance split
nnoremap <leader>[ <c-w>=
" Maximize split
nnoremap <leader>] <c-w><bar>

" Replace the word under the cursor
nnoremap <leader>s :%s/\<<C-r><C-w>\>/

" Close buffers
nmap <leader>w :bd<CR>
"nmap <leader>hl :let @/ = ""<CR>

" clears the search buffer when you press ,/
nmap <silent> ,/ :nohlsearch<CR>

" View diff before saving
nnoremap <leader>D :DiffSaved<cr>

" Reselect text from last action
nnoremap gr `[V`]

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP
" }}}
" Functions {{{
function! s:DeleteBuffer()
  let path = fnamemodify(getline('.')[2:], ':p')
  let bufn = matchstr(path, '\v\d+\ze\*No Name')
  exec "bd" bufn ==# "" ? path : bufn
  exec "norm \<F5>"
endfunction
" }}}
" File type specific settings {{{
autocmd BufRead,BufNewFile *.md set spell
autocmd BufRead,BufNewFile *.md set wrap
autocmd BufRead,BufNewFile *.md set textwidth=79
autocmd BufRead,BufNewFile *.md set colorcolumn=80
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md set formatoptions=qrn1t

autocmd BufRead,BufNewFile *.feature set wrap
autocmd BufRead,BufNewFile *.feature set textwidth=79
autocmd BufRead,BufNewFile *.feature set colorcolumn=80
autocmd BufRead,BufNewFile *.feature set formatoptions=qrn1t
" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
autocmd BufRead,BufNewFile Boxfile set filetype=yaml

autocmd BufRead,BufNewFile *.html set foldnestmax=99
autocmd BufRead,BufNewFile *.html set foldmethod=indent

autocmd BufRead,BufNewFile *.json set foldnestmax=99
autocmd BufRead,BufNewFile *.json set foldmethod=indent


" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" }}}
" NERDTree {{{
let g:NERDSpaceDelims=1
let NERDTreeShowHidden=1
" }}}
" CTRLP {{{
let g:ctrlp_match_window = 'order:ttb,max:20'
" Adding Functionality for closing buffers with <c-@> from ctrl-p
let g:ctrlp_buffer_func = { 'enter': 'CtrlPMappings' }
function! CtrlPMappings()
  nnoremap <buffer> <silent> <C-@> :call <sid>DeleteBuffer()<cr>
endfunction
" }}}
" Syntax {{{
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_always_populate_loc_list = 1
" }}}
" Gitgutter {{{
let g:gitgutter_enabled = 0
" }}}
" Ultisnips {{{
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:ycm_use_ultisnips_completer = 1
" UltiSnips completion function that tries to expand a snippet. If there's no
" snippet for expanding, it checks for completion window and if it's
" shown, selects first element. If there's no completion window it tries to
" jump to next placeholder. If there's no placeholder it just returns TAB key
" function! g:UltiSnips_Complete()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips#JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction
" " Ultisnips trigger help
" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" }}}

" vim:foldmethod=marker:foldlevel=0
