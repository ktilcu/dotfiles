" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable

" vim-plug {{{
filetype on " without this vim emits a zero exit status, later, because of :ft off

if filereadable(expand("~/.vimrc.plug"))
  source ~/.vimrc.plug
endif

" ensure ftdetect et al work
filetype plugin indent on
" }}}
" Spaces and Tabs {{{
set autoindent
set backspace=2                                              " Fix broken backspace in some setups
set expandtab                                                " expand tabs to spaces
set nowrap                                                   " don't wrap lines
set scrolloff=3                                              " show context above/below cursorline
set shiftround                                               " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth=4                                             " number of spaces to use for autoindenting
set smarttab                                                 " insert tabs on the start of a line according to shiftwidth, not tabstop
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set tabstop=4                                                " actual tabs occupy 8 characters
set linebreak

" Whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" indent <CR> in function braces
let delimitMate_expand_cr = 1

" }}}
" Swap files {{{
set backupcopy=yes                                           " see :help crontab
set directory-=.                                             " don't store swapfiles in the current directory
set nobackup
set noswapfile
" }}}
" Misc {{{
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set clipboard=unnamed                                        " yank and paste with the system clipboard
set encoding=utf-8
set hidden                                                   " hides buffers instead of closing them
set history=1000                                             " remember more commands and search history
set pastetoggle=<F2>                                         " turn autoindent off to paste large amounts of text
set undolevels=1000                                          " use many muchos levels of undo
" }}}
" Search {{{
set hlsearch                                                 " highlight search terms
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set smartcase                                                " case-sensitive search if any caps
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" Use Ag over Grep
set grepprg=ag\ --nogroup\ --nocolor
" }}}
" UI {{{
set background=dark
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set modelines=1
set number                                                   " show line numbers
set ruler                                                    " show where you are
set showcmd
set showmatch                                                " set show matching parenthesis
" 0 -> solid block
" 1 -> cursor line
" 2 -> solid underscore
" insert
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" normal
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" }}}
" Folding {{{
set foldenable          " don't fold files by default on open
set foldmethod=syntax   " fold based on indent level
set foldnestmax=10      " max 10 depth
set foldlevelstart=99   " start with fold level of 1
" PHP folding
let g:php_folding=2
nnoremap <space> za
" }}}
" Splits {{{
set splitbelow                                               " More sane window split behavior
set splitright                                               " More sane window split behavior
" }}}
" Colors {{{
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme monokai
" }}}
" Mouse Support {{{
" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif
" }}}
" Remaps {{{
let mapleader = ','
" BOL EOL remap
nnoremap H ^
nnoremap L $
onoremap H ^
onoremap L $
vnoremap H ^
vnoremap L $
onoremap H ^
onoremap L $
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
nnoremap <leader>a :Rg<space>
nnoremap <leader>b :Buffers<CR>
nnoremap <C-p> :FZF<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>g :GitGutterToggle<CR>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
" keyboard shortcuts
inoremap jj <ESC>
nnoremap <leader>u :GundoToggle<CR>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" horizontal split
noremap <leader>- <c-w>s
" vertical split
noremap <leader>\ <c-w>v
" close split
noremap <leader>\\ <c-w>q
" Rebalance split
nnoremap <leader>[ <c-w>=
" Maximize split
nnoremap <leader>] <c-w><bar>

" fugitive remaps
nnoremap gbr :Gbrowse<CR>
vnoremap gbr :Gbrowse<CR>
nnoremap gbl :Gblame<CR>

" sort lines by length
vmap <leader>l :'<,'>'<,'> ! awk '{ print length(), $0 <bar> "sort -n <bar> cut -d\\  -f2-" }'<CR>

" Replace the word under the cursor
nnoremap <leader>s :%s/\<<C-r><C-w>\>/
" poor mans jump to definition by searching with Ag :(
nnoremap <leader>gd :Ack<space><C-r><C-w><CR>

" Close buffers
nmap <leader>w :bd<CR>
"nmap <leader>hl :let @/ = ""<CR>

" clears the search buffer when you press ,/
nmap <silent> ,/ :nohlsearch<CR>

" Reselect text from last action
nnoremap gr `[V`]

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" }}}
" Functions {{{
function! s:DeleteBuffer()
  let path = fnamemodify(getline('.')[2:], ':p')
  let bufn = matchstr(path, '\v\d+\ze\*No Name')
  exec "bd" bufn ==# "" ? path : bufn
  exec "norm \<F5>"
endfunction
" }}}
" File type specific settings {{{
autocmd BufRead,BufNewFile *.md set spell
autocmd BufRead,BufNewFile *.md set wrap
autocmd BufRead,BufNewFile *.md set textwidth=79
autocmd BufRead,BufNewFile *.md set colorcolumn=80
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md set formatoptions=qrn1t

autocmd BufRead,BufNewFile *.feature set wrap
autocmd BufRead,BufNewFile *.feature set textwidth=79
autocmd BufRead,BufNewFile *.feature set colorcolumn=80
autocmd BufRead,BufNewFile *.feature set formatoptions=qrn1t
" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
autocmd BufRead,BufNewFile Boxfile set filetype=yaml

autocmd BufRead,BufNewFile *.html,*.json set foldnestmax=99
autocmd BufRead,BufNewFile *.html,*.json set foldmethod=indent

autocmd BufRead,BufNewFile *.ts setlocal filetype=typescript
set rtp+=/Users/kyle/.vim/plugged/typescript-tools.vim/

autocmd FileType js UltiSnipsAddFiletypes javascript-jasmine
autocmd FileType js UltiSnipsAddFiletypes javascript-node
autocmd FileType js UltiSnipsAddFiletypes javascript-jsdoc

" open image swith imgcat
autocmd BufEnter *.png,*.jpg,*gif exec "! ~/.iterm2/imgcat ".expand("%") | :bw

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" }}}
" NERDTree {{{
let g:NERDSpaceDelims=1
let NERDTreeShowHidden=1
" }}}
" FZF {{{
" let g:ctrlp_match_window = 'order:ttb,max:20'
" Adding Functionality for closing buffers with <c-@> from ctrl-p
" let g:ctrlp_buffer_func = { 'enter': 'CtrlPMappings' }
" function! CtrlPMappings()
"   nnoremap <buffer> <silent> <C-@> :call <sid>DeleteBuffer()<cr>
" endfunction
" }}}
" RG {{{
let g:rg_command = 'rg --vimgrep --smart-case'
" }}}
" Syntax {{{
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_php_checkers = ['phpcs']
let g:syntastic_php_phpcs_args = '--standard=PSR1,PSR2 -n'
" }}}
" Gitgutter {{{
let g:gitgutter_enabled = 0
" }}}
" Ultisnips {{{
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)

" " SuperTab like snippets behavior.
" " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" "imap <expr><TAB>
" " \ pumvisible() ? "\<C-n>" :
" " \ neosnippet#expandable_or_jumpable() ?
" " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" " For conceal markers.
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif


let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"}}}
" Table Mode {{{
let g:table_mode_corner="|"
" }}}
" Fugitive {{{
autocmd BufReadPost fugitive://* set bufhidden=delete
" }}}
" JsDoc {{{
nmap <leader>doc <plug>(jsdoc)
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_input_description=1
let g:jsdoc_enable_es6 =1
" }}}
"{{{ Tagbar
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
" let g:tagbar_type_typescript = {
"   \ 'ctagsbin' : 'tstags',
"   \ 'ctagsargs' : '-f-',
"   \ 'kinds': [
"     \ 'e:enums:0:1',
"     \ 'f:function:0:1',
"     \ 't:typealias:0:1',
"     \ 'M:Module:0:1',
"     \ 'I:import:0:1',
"     \ 'i:interface:0:1',
"     \ 'C:class:0:1',
"     \ 'm:method:0:1',
"     \ 'p:property:0:1',
"     \ 'v:variable:0:1',
"     \ 'c:const:0:1',
"   \ ],
"   \ 'sort' : 0
" \ }
let g:tagbar_type_typescript = {
  \ 'ctagstype': 'typescript',
  \ 'kinds': [
    \ 'c:classes',
    \ 'n:modules',
    \ 'f:functions',
    \ 'v:variables',
    \ 'v:varlambdas',
    \ 'm:members',
    \ 'i:interfaces',
    \ 'e:enums',
  \ ]
\ }
" let g:tagbar_type_typescript = {
"         \ 'ctagstype' : 'typescript',
"         \ 'kinds'     : [
"             \ 'c:classes',
"             \ 'a:abstract classes:0:0',
"             \ 'n:modules',
"             \ 'f:functions:0:0',
"             \ 'v:variables:1:0',
"             \ 'l:varlambdas',
"             \ 'm:members',
"             \ 'i:interfaces',
"             \ 'e:enums',
"             \ 'I:imports'
"         \ ],
"         \ 'sort'    : 0
"     \ }
"}}}
" pdv {{{
let g:pdv_template_dir = $HOME ."/.vim/plugged/pdv/templates_snip"
nnoremap <buffer> <C-d> :call pdv#DocumentWithSnip()<CR>
"}}}
" prettier {{{
" none|es5|all
let g:prettier#config#trailing_comma = 'es5'
" }}}
" Allow gf to work with PHP namespaced classes.
set includeexpr=substitute(v:fname,'\\\','/','g')
set suffixesadd+=.php
set path+=/Users/kyle/development/placelocal/lib/**
" {{{ YCM
let g:ycm_use_ultisnips_completer = 1
if !exists("g:ycm_semantic_triggers")
   let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']
set completeopt-=preview" }}}
" vim:foldmethod=marker:foldlevel=0
